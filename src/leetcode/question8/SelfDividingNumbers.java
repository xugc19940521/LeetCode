package leetcode.question8;

import java.util.ArrayList;
import java.util.List;

/**
 * @CLassName SelfDividingNumbers(728)
 * @Description 自除数 是指可以被它包含的每一位数除尽的数。
 *              例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。
 *              还有，自除数不允许包含 0 。
 *              给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。
 *              输入：上边界left = 1, 下边界right = 22
 *              输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
 * @Author xugc
 * @Date 2018/9/30 7:25
 * @Version 1.0
 */
public class SelfDividingNumbers {
    public static List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> result = new ArrayList<Integer>();
        for(int i=left;i<=right;i++){
            if(selfDividingNumber(i)){
                result.add(i);
            }
        }
        return result;
    }

    public static boolean selfDividingNumber(int num){
        if(num<10)return true;
        int temp = num, c=0;
        while(temp!=0){
            c = temp%10;
            if(c==0||num%c!=0){
                return false;
            }
            temp=temp/10;
        }
        return true;
    }
}
